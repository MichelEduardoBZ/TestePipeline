name: Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  job-hello:
    runs-on: ubuntu-latest
    steps:
      - name: Imprimir mensagem
        run: echo "Iniciando servi√ßo"

  checkout_java_docker:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Java SDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: my-app:latest
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Executar scripts
        run: |
          git branch
          java --version

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B compile --file ./pom.xml

      - name: Run UserApiTests directly
        run: |
          # Compilar a classe de teste diretamente
          javac -cp ".:$(find ~/.m2/repository -type d | tr '\n' ':')" src/test/java/tests/UserApiTests.java
          
          # Executar o teste diretamente
          java -cp ".:$(find ~/.m2/repository -type d | tr '\n' ':')" org.junit.platform.console.ConsoleLauncher \
            --class-path src/test/java \
            --select-class tests.UserApiTests
